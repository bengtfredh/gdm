From e6ed6f48c35a6c736a5cde2dcfb6c10941e07809 Mon Sep 17 00:00:00 2001
From: Ray Strode <rstrode@redhat.com>
Date: Fri, 27 Nov 2009 18:27:53 -0500
Subject: [PATCH 1/2] Save root window to pixmap at _XROOTPMAP_ID

This combined with starting the X server with -nr
will give us a nice fade transition when g-s-d starts
---
 daemon/gdm-simple-slave.c |    8 +++++
 daemon/gdm-slave.c        |   72 +++++++++++++++++++++++++++++++++++++++++++++
 daemon/gdm-slave.h        |    1 +
 3 files changed, 81 insertions(+), 0 deletions(-)

diff --git a/daemon/gdm-simple-slave.c b/daemon/gdm-simple-slave.c
index 9d1347a..fc8649c 100644
--- a/daemon/gdm-simple-slave.c
+++ b/daemon/gdm-simple-slave.c
@@ -1215,6 +1215,14 @@ setup_server (GdmSimpleSlave *slave)
 
         /* Set the initial keyboard layout to something reasonable */
         gdm_slave_set_initial_keyboard_layout (GDM_SLAVE (slave));
+        /* The root window has a background that may be useful
+         * to cross fade or transition from when setting the
+         * login screen background.  We read it here, and stuff
+         * it into the standard _XROOTPMAP_ID root window property,
+         * so gnome-settings-daemon can get at it.
+         */
+        gdm_slave_save_root_windows (GDM_SLAVE (slave));
+
 }
 
 static void
diff --git a/daemon/gdm-slave.c b/daemon/gdm-slave.c
index 371b9bd..694dcde 100644
--- a/daemon/gdm-slave.c
+++ b/daemon/gdm-slave.c
@@ -43,6 +43,7 @@
 #include <dbus/dbus-glib-lowlevel.h>
 
 #include <X11/Xlib.h> /* for Display */
+#include <X11/Xatom.h> /* for XA_PIXMAP */
 #include <X11/cursorfont.h> /* for watch cursor */
 #include <X11/extensions/Xrandr.h>
 #include <X11/Xatom.h>
@@ -364,6 +365,77 @@ gdm_slave_run_script (GdmSlave   *slave,
         return ret;
 }
 
+static void
+gdm_slave_save_root_window_of_screen (GdmSlave *slave,
+                                      Atom      id_atom,
+                                      int       screen_number)
+{
+        Window root_window;
+        GC gc;
+        XGCValues values;
+        Pixmap pixmap;
+        int width, height, depth;
+
+        root_window = RootWindow (slave->priv->server_display,
+                                  screen_number);
+
+        width = DisplayWidth (slave->priv->server_display, screen_number);
+        height = DisplayHeight (slave->priv->server_display, screen_number);
+        depth = DefaultDepth (slave->priv->server_display, screen_number);
+        pixmap = XCreatePixmap (slave->priv->server_display,
+                                root_window,
+                                width, height, depth);
+
+        values.function = GXcopy;
+        values.plane_mask = AllPlanes;
+        values.fill_style = FillSolid;
+        values.subwindow_mode = IncludeInferiors;
+
+        gc = XCreateGC (slave->priv->server_display,
+                        root_window,
+                        GCFunction | GCPlaneMask | GCFillStyle | GCSubwindowMode,
+                        &values);
+
+        if (XCopyArea (slave->priv->server_display,
+                       root_window, pixmap, gc, 0, 0,
+                       width, height, 0, 0)) {
+
+                long pixmap_as_long;
+
+                pixmap_as_long = (long) pixmap;
+
+                XChangeProperty (slave->priv->server_display,
+                                 root_window, id_atom, XA_PIXMAP,
+                                 32, PropModeReplace, (guchar *) &pixmap_as_long,
+                                 1);
+
+        }
+
+        XFreeGC (slave->priv->server_display, gc);
+}
+
+void
+gdm_slave_save_root_windows (GdmSlave *slave)
+{
+        int i, number_of_screens;
+        Atom atom;
+
+        number_of_screens = ScreenCount (slave->priv->server_display);
+
+        atom = XInternAtom (slave->priv->server_display,
+                            "_XROOTPMAP_ID", False);
+
+        if (atom == 0) {
+                return;
+        }
+
+        for (i = 0; i < number_of_screens; i++) {
+                gdm_slave_save_root_window_of_screen (slave, atom, i);
+        }
+
+        XSync (slave->priv->server_display, False);
+}
+
 void
 gdm_slave_set_initial_keyboard_layout (GdmSlave *slave)
 {
diff --git a/daemon/gdm-slave.h b/daemon/gdm-slave.h
index 7af20ed..aaaa8f2 100644
--- a/daemon/gdm-slave.h
+++ b/daemon/gdm-slave.h
@@ -78,6 +78,7 @@ void                gdm_slave_set_initial_keyboard_layout (GdmSlave *slave);
 void                gdm_slave_set_initial_cursor_position (GdmSlave *slave);
 
 void                gdm_slave_set_busy_cursor        (GdmSlave   *slave);
+void                gdm_slave_save_root_windows      (GdmSlave   *slave);
 gboolean            gdm_slave_run_script             (GdmSlave   *slave,
                                                       const char *dir,
                                                       const char *username);
-- 
1.7.9


From 1872e3e00cc0fc820a04207ca1227f04e03b77cc Mon Sep 17 00:00:00 2001
From: Ray Strode <rstrode@redhat.com>
Date: Fri, 27 Nov 2009 18:52:54 -0500
Subject: [PATCH 2/2] Enable smooth transition between plymouth and X

This commit checks if plymouth is running, and if so,
turns on the smooth transition between plymouth and X.
---
 daemon/gdm-server.c       |   55 +++++++++++++++++++++++++++
 daemon/gdm-server.h       |    1 +
 daemon/gdm-simple-slave.c |   91 ++++++++++++++++++++++++++++++++++++++++++++-
 3 files changed, 146 insertions(+), 1 deletions(-)

diff --git a/daemon/gdm-server.c b/daemon/gdm-server.c
index 54bf8b3..8cb10c2 100644
--- a/daemon/gdm-server.c
+++ b/daemon/gdm-server.c
@@ -32,6 +32,7 @@
 #include <pwd.h>
 #include <grp.h>
 #include <signal.h>
+#include <sys/ioctl.h>
 #include <sys/resource.h>
 
 #ifdef HAVE_SYS_PRCTL_H
@@ -41,6 +42,7 @@
 #ifdef WITH_SYSTEMD
 #include <systemd/sd-daemon.h>
 #endif
+#include <linux/vt.h>
 
 #include <glib.h>
 #include <glib/gi18n.h>
@@ -732,6 +734,44 @@ gdm_server_spawn (GdmServer  *server,
         return ret;
 }
 
+static int
+get_active_vt (void)
+{
+        int console_fd;
+        struct vt_stat console_state = { 0 };
+
+        console_fd = open ("/dev/tty0", O_RDONLY | O_NOCTTY);
+
+        if (console_fd < 0) {
+                goto out;
+        }
+
+        if (ioctl (console_fd, VT_GETSTATE, &console_state) < 0) {
+                goto out;
+        }
+
+out:
+        if (console_fd >= 0) {
+                close (console_fd);
+        }
+
+        return console_state.v_active;
+}
+
+static char *
+get_active_vt_as_string (void)
+{
+        int vt;
+
+        vt = get_active_vt ();
+
+        if (vt <= 0) {
+                return NULL;
+        }
+
+        return g_strdup_printf ("vt%d", vt);
+}
+
 /**
  * gdm_server_start:
  * @disp: Pointer to a GdmDisplay structure
@@ -750,6 +790,21 @@ gdm_server_start (GdmServer *server)
         return res;
 }
 
+gboolean
+gdm_server_start_on_active_vt (GdmServer *server)
+{
+        gboolean res;
+        char *vt;
+
+        g_free (server->priv->command);
+        server->priv->command = g_strdup (X_SERVER " -nr -verbose");
+        vt = get_active_vt_as_string ();
+        res = gdm_server_spawn (server, vt);
+        g_free (vt);
+
+        return res;
+}
+
 static void
 server_died (GdmServer *server)
 {
diff --git a/daemon/gdm-server.h b/daemon/gdm-server.h
index b53d68e..4939382 100644
--- a/daemon/gdm-server.h
+++ b/daemon/gdm-server.h
@@ -57,6 +57,7 @@ GdmServer *         gdm_server_new       (const char *display_id,
                                           const char *seat_id,
                                           const char *auth_file);
 gboolean            gdm_server_start     (GdmServer   *server);
+gboolean            gdm_server_start_on_active_vt (GdmServer   *server);
 gboolean            gdm_server_stop      (GdmServer   *server);
 char *              gdm_server_get_display_device (GdmServer *server);
 
diff --git a/daemon/gdm-simple-slave.c b/daemon/gdm-simple-slave.c
index fc8649c..dd19ced 100644
--- a/daemon/gdm-simple-slave.c
+++ b/daemon/gdm-simple-slave.c
@@ -93,6 +93,7 @@ struct GdmSimpleSlavePrivate
 #ifdef  HAVE_LOGINDEVPERM
         gboolean           use_logindevperm;
 #endif
+        guint              plymouth_is_running : 1;
 };
 
 enum {
@@ -1204,6 +1205,72 @@ on_start_session_later (GdmGreeterServer *session,
         slave->priv->start_session_when_ready = FALSE;
 }
 
+static gboolean
+plymouth_is_running (void)
+{
+        int      status;
+        gboolean res;
+        GError  *error;
+
+        error = NULL;
+        res = g_spawn_command_line_sync ("/bin/plymouth --ping",
+                                         NULL, NULL, &status, &error);
+        if (! res) {
+                g_debug ("Could not ping plymouth: %s", error->message);
+                g_error_free (error);
+                return FALSE;
+        }
+
+        return WIFEXITED (status) && WEXITSTATUS (status) == 0;
+}
+
+static void
+plymouth_prepare_for_transition (GdmSimpleSlave *slave)
+{
+        gboolean res;
+        GError  *error;
+
+        error = NULL;
+        res = g_spawn_command_line_sync ("/bin/plymouth deactivate",
+                                         NULL, NULL, NULL, &error);
+        if (! res) {
+                g_warning ("Could not deactivate plymouth: %s", error->message);
+                g_error_free (error);
+        }
+}
+
+static void
+plymouth_quit_with_transition (GdmSimpleSlave *slave)
+{
+        gboolean res;
+        GError  *error;
+
+        error = NULL;
+        res = g_spawn_command_line_sync ("/bin/plymouth quit --retain-splash",
+                                         NULL, NULL, NULL, &error);
+        if (! res) {
+                g_warning ("Could not quit plymouth: %s", error->message);
+                g_error_free (error);
+        }
+        slave->priv->plymouth_is_running = FALSE;
+}
+
+static void
+plymouth_quit_without_transition (GdmSimpleSlave *slave)
+{
+        gboolean res;
+        GError  *error;
+
+        error = NULL;
+        res = g_spawn_command_line_sync ("/bin/plymouth quit",
+                                         NULL, NULL, NULL, &error);
+        if (! res) {
+                g_warning ("Could not quit plymouth: %s", error->message);
+                g_error_free (error);
+        }
+        slave->priv->plymouth_is_running = FALSE;
+}
+
 static void
 setup_server (GdmSimpleSlave *slave)
 {
@@ -1223,6 +1290,10 @@ setup_server (GdmSimpleSlave *slave)
          */
         gdm_slave_save_root_windows (GDM_SLAVE (slave));
 
+        /* Plymouth is waiting for the go-ahead to exit */
+        if (slave->priv->plymouth_is_running) {
+                plymouth_quit_with_transition (slave);
+        }
 }
 
 static void
@@ -1426,6 +1497,10 @@ on_server_exited (GdmServer      *server,
         g_debug ("GdmSimpleSlave: server exited with code %d\n", exit_code);
 
         gdm_slave_stopped (GDM_SLAVE (slave));
+
+        if (slave->priv->plymouth_is_running) {
+                plymouth_quit_without_transition (slave);
+        }
 }
 
 static void
@@ -1438,6 +1513,10 @@ on_server_died (GdmServer      *server,
                  g_strsignal (signal_number));
 
         gdm_slave_stopped (GDM_SLAVE (slave));
+
+        if (slave->priv->plymouth_is_running) {
+                plymouth_quit_without_transition (slave);
+        }
 }
 
 static gboolean
@@ -1484,7 +1563,14 @@ gdm_simple_slave_run (GdmSimpleSlave *slave)
                                   G_CALLBACK (on_server_ready),
                                   slave);
 
-                res = gdm_server_start (slave->priv->server);
+                slave->priv->plymouth_is_running = plymouth_is_running ();
+
+                if (slave->priv->plymouth_is_running) {
+                        plymouth_prepare_for_transition (slave);
+                        res = gdm_server_start_on_active_vt (slave->priv->server);
+                } else {
+                        res = gdm_server_start (slave->priv->server);
+                }
                 if (! res) {
                         g_warning (_("Could not start the X "
                                      "server (your graphical environment) "
@@ -1494,6 +1580,9 @@ gdm_simple_slave_run (GdmSimpleSlave *slave)
                                      "In the meantime this display will be "
                                      "disabled.  Please restart GDM when "
                                      "the problem is corrected."));
+                        if (slave->priv->plymouth_is_running) {
+                                plymouth_quit_without_transition (slave);
+                        }
                         exit (1);
                 }
 
-- 
1.7.9

